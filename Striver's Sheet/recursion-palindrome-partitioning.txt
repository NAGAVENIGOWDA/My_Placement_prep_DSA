class Solution {
public:
    bool isPalindrome(string s, int start, int end) {
    while (start <= end) {
      if (s[start++] != s[end--])
        return false;
        }
        return true;
    }


    vector<vector<string>> partition(string s) {


        vector<vector<string>>ans;
        vector<string>ds;
        f(0,s,ds,ans);
        return ans;
        
    }


    void f(int ind,string s,vector<string>ds,vector<vector<string>>&ans){
        if(ind==s.size()){
            ans.push_back(ds);
            return;
        }

        for(int i=ind;i<s.size();i++){
            //before partitioning -check if the substring from ind to i forms a palindrome
            if(isPalindrome(s,ind,i)){
                ds.push_back(s.substr(ind,i-ind+1));
                f(i+1,s,ds,ans);
                ds.pop_back();
            }
        }
    }
};