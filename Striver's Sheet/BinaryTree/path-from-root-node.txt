/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
void rootToNode(TreeNode * root,int node,vector<int>ds,vector<int>&ans);
vector<int> Solution::solve(TreeNode* A, int B) {
    
    vector<int>ans;
    vector<int>ds;
    
    rootToNode(A,B,ds,ans);
    return ans;
}

void rootToNode(TreeNode * root,int node,vector<int>ds,vector<int>&ans){
    
    if(root==NULL){
        return ;
    }
    ds.push_back(root->val);
    
    if(root->val==node){
        for(int i=0;i<ds.size();i++){
            ans.push_back(ds[i]);
        }
        return;
    }
    rootToNode(root->left,node,ds,ans);
    rootToNode(root->right,node,ds,ans);
}








bool hasPath(Node *root, vector<int>& arr, int x)
{
    // if root is NULL
    // there is no path


    if (!root)
        return false;

    arr.push_back(root->data);    
     
   
    if (root->data == x)    
        return true;
     
   
    if (hasPath(root->left, arr, x) ||
        hasPath(root->right, arr, x))
        return true;
     
    // required node does not lie either in the 
    // left or right subtree of the current node
    // Thus, remove current node's value from 
    // 'arr'and then return false    
    arr.pop_back();
    return false;            
}