/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        // Your code here
        if(!root) {
            return 0;
        }
        queue<pair<TreeNode*,int>>q ;
        int maxwidth=INT_MIN;
        q.push({root,0});
        
        while(!q.empty()){
            int n=q.size();
            int minInd=q.front().second;
            int first,last;
            
            for(int i=0;i<n;i++){
                auto top=q.front();
                q.pop();
                TreeNode *node=top.first;
                int cur=top.second - minInd;
                
                if(i==0) first = top.second;
                if(i==n-1) last=top.second;
                
                if(node->left!=NULL) q.push({node->left,(long long)2*cur+1});
                if(node->right!=NULL) q.push({node->right,(long long)2*cur+2});
                
            }
            
            maxwidth=max(maxwidth,last-first+1);
        }
        
    return maxwidth;
    }
};