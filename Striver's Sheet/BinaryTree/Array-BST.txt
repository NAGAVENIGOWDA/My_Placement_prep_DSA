//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;
/*Given a sorted array. Convert it into a Height balanced Binary Search Tree (BST).
 Find the preorder traversal of height balanced BST. If there exist many such balanced BST 
 consider the tree whose preorder is lexicographically smallest.
Height balanced BST means a binary tree in which the depth of the left subtree and the right subtree 
of every node never differ by more than 1.*/
// } Driver Code Ends

class Node{
    public:
    int data;
    Node* left;
    Node* right;
    
    Node(int d){
        data=d;
        left=right=NULL;
    }
};

class Solution {
public:

    Node* solve(int st,int end,vector<int>&arr){
        if(st>end){
            return  NULL;
        }
        
        int mid = st + (end - st) / 2;
        Node* root= new Node(arr[mid]);
        root->left=solve(st,mid-1,arr);
        root->right=solve(mid+1,end,arr);
        
        return root;
    }
    
    void preorder(Node* root,vector<int>&ans){
        if(root==NULL)return ;
        ans.push_back(root->data);
        preorder(root->left,ans);
        preorder(root->right,ans);
    }

    vector<int> sortedArrayToBST(vector<int>& arr) {
        int st=0;
        int end=arr.size()-1;
        Node* root= solve(st,end,arr);
        
        vector<int>ans;
        preorder(root,ans);
        
        return ans;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<int>nums(n);
		for(int i = 0; i < n; i++)cin >> nums[i];
		Solution obj;
		vector<int>ans = obj.sortedArrayToBST(nums);
		for(auto i: ans)
			cout << i <<" ";
		cout << "\n";
	}
	return 0;
}
// } Driver Code Ends



//version 2


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
class Solution {
public:
   TreeNode* solve(int s,int e,vector<int>&nums){
    if(s>e) return NULL;

    int mid=(s+e)/2;
    TreeNode* newNode=new TreeNode(nums[mid]);
    newNode->left=solve(s,mid-1,nums);
    newNode->right=solve(mid+1,e,nums);
   
   return newNode;

   }
    TreeNode* sortedArrayToBST(vector<int>& nums) {

         TreeNode* root=solve(0,nums.size()-1,nums);

         return root;
        
    }
};