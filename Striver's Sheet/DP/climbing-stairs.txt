class Solution {
public:

Given a number of stairs. Starting from the 0th stair we need to climb to the “Nth” stair. 
At a time we can climb either one or two steps. We need to return the total number of distinct 
ways to reach from 0th to Nth stair.
    
    
    int climbStairs(int n) {
        
        vector<int>dp(n+1,0);

        dp[0]=1;
        dp[1]=1;

        for(int i=2;i<=n;i++){

            dp[i]=dp[i-1] + dp[i-2];
        }
     
     return dp[n];

     /*
     
        int prev1=1;
        int prev2=1;

        for(int i=2;i<=n;i++){

            int cur=prev2 + prev1;
            prev2=prev1;
            prev1=cur;
        }
     
     return prev1;*/
    }

    int f(int n , vector<int>&dp){
        if(n==0) return 1;
        if(n==1) return 1;

        if(dp[n] !=-1) return dp[n];

        return dp[n]=f(n-1,dp)+ f(n-2,dp);
    }
};