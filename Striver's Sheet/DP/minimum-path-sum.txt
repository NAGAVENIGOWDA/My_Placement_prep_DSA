class Solution {
public:
    int minPathSum(vector<vector<int>>& matrix) {
    

    /*
    int n =matrix.size();
    int m =matrix[0].size();
      vector<vector<int>> dp(n, vector<int>(m, 0)); // Initialize a DP table to store minimum path sums

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (i == 0 && j == 0)
                dp[i][j] = matrix[i][j];
            else {
                
                int up = matrix[i][j];
                if (i > 0)
                    up += dp[i - 1][j]; // Include the minimum path sum from above
                else
                    up += 1e9; // A large value if moving up is not possible (out of bounds)

                int left = matrix[i][j];
                if (j > 0)
                    left += dp[i][j - 1]; // Include the minimum path sum from the left
                else
                    left += 1e9; // A large value if moving left is not possible (out of bounds)

                // Store the minimum path sum in dp[i][j]
                dp[i][j] = min(up, left);
            }
        }
    }

    // The final result is stored in dp[n-1][m-1], which represents the destination
    return dp[n - 1][m - 1];

    */

//optimal 

    int n =matrix.size();
    int m =matrix[0].size();
    vector<int>prev(m,0); // Initialize a DP table to store minimum path sums

    for (int i = 0; i < n; i++) {
        vector<int>cur(m,0);
        for (int j = 0; j < m; j++) {
            if (i == 0 && j == 0)
                cur[j] = matrix[i][j];
            else {
                
                int up = matrix[i][j];
                if (i > 0)
                    up += prev[j]; 
                else
                    up += 1e9; 

                int left = matrix[i][j];
                if (j > 0)
                    left += cur[j - 1];
                else
                    left += 1e9; 

               
                cur[j] = min(up, left);
            }

           
        }
     prev=cur;

  

    }
    return prev[m - 1];
    
    }
    
    int f(int i,int j,vector<vector<int>>& grid,vector<vector<int>>&dp){
        
        if( i<0 || j<0) return 1e9;
        
        if(i==0 && j==0) return grid[0][0];
        
        if(dp[i][j] !=-1) return dp[i][j];
        
        int up= grid[i][j] + f(i-1,j,grid,dp);
        int left=grid[i][j] + f(i,j-1,grid,dp);
        
        
        return dp[i][j]= min(up,left);

    }
};