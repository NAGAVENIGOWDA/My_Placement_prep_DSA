#include <bits/stdc++.h> 

long long mergesort(long long *arr,int low,int high);
long long merge(long long * arr,int low,int mid,int high);

long long getInversions(long long *arr, int n){
    
    
     return mergesort(arr,0,n-1);
}

long long mergesort(long long * arr,int low,int high){
    long long count=0;

    if(low>=high) return count;

    int mid=(low+high)/2;
    count+=mergesort(arr,low,mid);
    count+=mergesort(arr,mid+1,high);
    count+=merge(arr,low,mid,high);
    return count;
}

long long merge(long long * arr, int low, int mid, int high) {
    vector<long long> tmp;
    int left = low;
    int right = mid + 1;
    long long count = 0; // Use long long for count to handle large input arrays
    
    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            tmp.push_back(arr[left]);
            left++;
        } else {
            tmp.push_back(arr[right]);
            count += (mid - left) + 1; // Update count here
            right++;
        }
    }

    while (left <= mid) {
        tmp.push_back(arr[left]);
        left++;
    }

    while (right <= high) {
        tmp.push_back(arr[right]);
        right++;
    }

    // Update elements in the original array from tmp
    for (int i = low; i <= high; i++) {
        arr[i] = tmp[i - low]; // Correct the index offset
    }

    return count;
}